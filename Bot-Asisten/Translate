#ilham mansiz

from PandaX_Userbot.runx import Stark

from googletrans import Translator

import requests
from PyDictionary import PyDictionary
from telethon import events
from telethon.tl import functions

@Stark.on(events.NewMessage(pattern="^/tr ?(.*)"))
async def _(event):
    input_str = event.pattern_match.group(1)
    if event.reply_to_msg_id:
        previous_message = await event.get_reply_message()
        text = previous_message.message
        lan = input_str or "id"
    elif "|" in input_str:
        lan, text = input_str.split("|")
    else:
        await Stark.send_message(
            event.chat_id, "`.tr LanguageCode` as reply to a message"
        )
        return
    text = emoji.demojize(text.strip())
    lan = lan.strip()
    translator = Translator()
    translated = translator.translate(text, dest=lan)
    after_tr_text = translated.text
    output_str = (
        f"**Translated By PandaX_Userbot Assistant Bot** \n"
        f"From {translated.src} to {lan} \n{after_tr_text}"
    )
    try:
        await Stark.send_message(event.chat_id, output_str)
    except Exception:
        await Stark.send_message(event.chat_id, "Something Went Wrong ðŸ¤”")

@Stark.on(events.NewMessage(pattern="/define"))
async def _(event):
    text = event.text[len("/define "):]
    word = f"{text}"
    let = dictionary.meaning(word)
    set = str(let)
    jet = set.replace("{", "")
    net = jet.replace("}", "")
    got = net.replace("'", "")
    await event.reply(got)

@Stark.on(events.NewMessage(pattern="/ud"))
async def _(event):
    text = event.text[len("/ud "):]
    results = requests.get(f'http://api.urbandictionary.com/v0/define?term={text}').json()
    try:
        reply_text = f'**{text}**\n\n{results["list"][0]["definition"]}\n\n_{results["list"][0]["example"]}_'
    except:
        reply_text = "No results found."
    await event.reply(reply_text)
    
# ilhammansiz
